<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shibadog site</title>
    <link>https://shibadog.github.io/</link>
    <description>Recent content on shibadog site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 26 Oct 2019 13:17:15 +0900</lastBuildDate>
    
	<atom:link href="https://shibadog.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hystrixを説明してみた２</title>
      <link>https://shibadog.github.io/posts/002_hystrix_02/</link>
      <pubDate>Sat, 26 Oct 2019 13:17:15 +0900</pubDate>
      
      <guid>https://shibadog.github.io/posts/002_hystrix_02/</guid>
      <description>Hystrixを説明してみた の続き
Hystrixの機能 Hystrixの機能紹介をしてみる。
 コマンド隔離 コマンドエラー検知  例外ハンドリング タイムアウトハンドリング  コマンド同時実行数制限  コマンド隔離 Hystrixではコマンドの隔離が行える。
具体的には、指定したメソッド一つが隔離対象となり、別名で隔離したメソッドと影響しあわないようにできる。
例えば、以下のように2つのコマンドを定義したアプリの場合。 コマンドAからアクセスするAPIAがタイムアウトを頻発するような状況になってしまったとすると、
コマンドAが即エラーを返すようなることで、リクエスト処理スレッドが占有されず、コマンドBは正常に処理が行われる。
 
コマンドエラー検知 コマンド内で実行される処理でExceptionが発生した場合には、このExceptionを検知してフォールバック処理を行うことができる。
また、コマンド内の処理のタイムアウトを測ることができ、指定時間を過ぎた場合に、HystrixのExceptionを発生させることができる。
timeInMillisecondsの秒数内に、numBuckets分の記録用の箱があるイメージ。 例えば、10,000msで10Bucketsの場合、集計範囲は1,000msになる。
circuitBreaker.errorThresholdPercentageで設定した割合でSuccess以外のエラー数となった場合に、ショートサーキット状態となる。
参考：GitHub - Netflix/Hystrix wiki
コマンド同時実行数制御 隔離されたコマンドは同時実行数の制御が行える。
Hystrixは隔離方式を2種類用意しており、デフォルトでは独立Threadによる制御を行う。
もう一つの制御方法として、セマフォ方式を持っている。
若干飽きて適当になった（ぇ
いったんこれまでにしておく。</description>
    </item>
    
    <item>
      <title>Hystrixを説明してみた</title>
      <link>https://shibadog.github.io/posts/001_hystrix_01/</link>
      <pubDate>Sun, 20 Oct 2019 21:10:22 +0900</pubDate>
      
      <guid>https://shibadog.github.io/posts/001_hystrix_01/</guid>
      <description>Hystrixとは Netflixが開発したOSSで、Circuit Breakerの実装。
Circuit Breakerとは、マイクロサービスで開発されたアプリケーション同士が、一つのアプリの障害で連鎖的に障害を発生させる状態を防止するための、ブレーカー的役割をする機能のこと。
後続のアプリケーションが障害を起こした場合、当該アプリで即エラーを返すことでリクエストの流入を抑える。
例えば、一番後続のアプリが障害を起こして、応答がなくなる。
リクエストが流れ続けるため、障害を起こしたアプリを呼び出す前段のアプリが引きずられ、スレッド枯渇やGC頻発による応答不能が発生する（ことがある）。
さらに、これを呼び出すアプリが同様に障害を起こすことで、正常なアプリへの呼び出しも行われなくなり、全体が障害となってしまう。
もし、Hystrixがアプリに組み込まれていた場合。
やはり、最下層のアプリに障害が発生し。。。
しかし、前段のアプリで、障害を検知して後続が障害の場合のロジックを通って
これによって、後続が障害により連続でエラーを返す状態になった場合にも、後続へのリクエストを中止し、負荷をかけないようにしたうえで、異常状態の対処を行う。
これが相当に便利であり、しかも後続への無駄な負荷をかけずにすむという代物でした。
今回はここまで。</description>
    </item>
    
    <item>
      <title>hugoにgoogleアナリティクスを導入</title>
      <link>https://shibadog.github.io/posts/hugo_analytics/</link>
      <pubDate>Thu, 17 Oct 2019 09:55:20 +0900</pubDate>
      
      <guid>https://shibadog.github.io/posts/hugo_analytics/</guid>
      <description> とりあえずgoogle analyticsが標準対応との記述を公式ドキュメントで見つけたのでやっておく。
1. google analyticsにログイン 2. 新規プロパティを作成 ハマったこと ウェブを選択。
アプリとウェブだとうまくできなかった（よくよめよ）
3. トラッキングIDをコピー プロパティのメニューから選ぶ
4. config.toml に追加 baseURL = &amp;quot;https://shibadog.github.io/&amp;quot; languageCode = &amp;quot;ja-jp&amp;quot; title = &amp;quot;shibadog site&amp;quot; theme = &amp;quot;hermit&amp;quot; googleAnalytics = &amp;quot;UA-999999999-9&amp;quot; [author] name = &amp;quot;shibadog&amp;quot; : :  参考  AGO&amp;rsquo;s page - hugoにgoogle アナリティクスを導入した話 なかけんのHugoノート - 画像を追加しよう  </description>
    </item>
    
    <item>
      <title>ブログのネタブログ</title>
      <link>https://shibadog.github.io/posts/blog_neta/</link>
      <pubDate>Wed, 16 Oct 2019 22:12:21 +0900</pubDate>
      
      <guid>https://shibadog.github.io/posts/blog_neta/</guid>
      <description>ブログを書きたい気持ちはある。（ともにネタもいくつか考えられはする）
がしかし、どこから攻めるか、はたまた思いつくままに初めて尻すぼみで終わるのではないかという不安がある。
これの対策として、ブログにしたい（つまり勉強したい）ネタを並べて置くことにする。
（つまり、「今興味があること」になるわけだ）
 Java系  Hystrix（というはサーキットブレーカー）についての動き説明 Resilience4jの動きの調査 Spring Boot サーキットブレーカーの調査 WebClient系の動き調査 リトライ系の動きの調査 Spring以外のフレームワーク（Javaに限る）の調査  インフラ寄り  くーばねーちすの調査 DockerとDocker Compose周り。あと運用。 TCP/IPやHTTPとかSSLとか  他ジャンル  らずぱい hugoのカスタマイズ・使いこなし系の話  アルゴリズム  暗号化まわり 圧縮回り GCアルゴリズム   次に、書こうと思っていつも断念する原因の調査（これをしないと進めない気がするから）
なぜ、ブログを書こうとして不安に陥るのか？
 調べると世の中大体、誰かが同じようなことをしている  でも、複数の情報を合わせないと目的のものにならない 結局自分の言葉にしないと理解が進まない よし、OK  自分が書くより他人が書いたもののほうがわかりやすいし正確  結局自分の言葉にしないと理解が進まない 間違っていることに気づいたら直せばよい。 よし、OK  ディテールにこだわってなかなか完成しない  調査内容にコンセプトを作り、小さく初めて積み上げる！ 途中まで進めてもいいんだよ、間違っていると感じたらやり直せばよいじゃないか。 よし、OK  誰の役にも立たないでしょう？すでにあるわけだし正確でもなく不十分だったりするわけだから  やらないよりはやったほうが良い。 少なくとも自分のためにはなるはず よし、OK   不安になったら見直そう。
あと、大得意の3日坊主にならないために、一週間に一回は何かしらを進めるようにしよう。 そして途中でもここに書き留めていこうと心に決める（ほんとかよ）</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://shibadog.github.io/posts/my-first-post/</link>
      <pubDate>Tue, 15 Oct 2019 23:52:59 +0900</pubDate>
      
      <guid>https://shibadog.github.io/posts/my-first-post/</guid>
      <description>ブログをまたやりたいと思い、 Hugo という静的サイトジェネレータと GitHub Pages を使って作ってみた。
3日坊主にならないことを祈る。
しかし、このHugoというやつ結構楽しい。 まずはこれを使いこなせるようになりたい。。。</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://shibadog.github.io/about-hugo/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shibadog.github.io/about-hugo/</guid>
      <description> 経験言語  Java  バックエンドWebシステム（リプレース開発） Swingを使ったクラサバ（リプレース開発） Spring Boot マイクロサービス（新規開発）  C#  Webシステム（保守・運用開発） WPFクラサバ（保守・運用開発）  VBA/VBS  Excel/Accessツール（設計・開発・導入・保守） バッチ（運用開発）  PHP  フレームワークなしのWebシステム（運用開発） テンプレートエンジンを使ったWebシステム（新規開発・運用保守） バッチ（新規開発）  JavaScript  WebPack + Vue.js 動的ページ（運用開発） JQueryの簡単なページ（新規開発）   ミドルウェア  Elasticsearch  Elasticsearchを使ったログ収集  File =&amp;gt; Fluentd =&amp;gt; Elasticsearch =&amp;gt; kibana DB =&amp;gt; Logstash =&amp;gt; Elasticsearch =&amp;gt; kibana    </description>
    </item>
    
  </channel>
</rss>