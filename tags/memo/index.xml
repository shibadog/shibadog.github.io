<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memo on shibadog site</title>
    <link>https://pages.shibadog.net/tags/memo/</link>
    <description>Recent content in memo on shibadog site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 03 Mar 2023 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://pages.shibadog.net/tags/memo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CentOSの事情</title>
      <link>https://pages.shibadog.net/posts/009_centos/</link>
      <pubDate>Fri, 03 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://pages.shibadog.net/posts/009_centos/</guid>
      <description>背景 業務で利用するLinux Serverを新規で作成することになった。
既存のLinux Serverの横に追加することになっているため、追加するサーバのOSも併せようと考えたが、現在CentOSはバージョンアップ方針が変わっており、そのまま採用すべきではないのではないか、となった。
適切なOSを選定するとともに、CentOSの事情を把握しておきたいため、調査する。
CentOSの事情 元々の流れ CentOSは Red Hat Enterprise Linux（以降RHEL）というディストリビューションの系列に属しており、RHELと機能的に互換性があることを目指したフリーのLinuxディストリビューションである。
RHELに含まれているソフトウェアの中にはOSSで無償公開しているため、これをもとに、商標や商用パッケージをのぞいたものをリビルドして提供している。そのため、「RHELクローン」と呼ばれることもある。(CentOS自体は公式には否定している)
最初期ではRHELを提供するレッドハットは関わっていなかったが、2014年からCentOSを正式に支援していくことを表明していた。
しかし、2020/12/8にCentOSからCentOS Streamに開発の主軸を移動し、CentOS Linux 8のサポートを2021年に停止している。RHEL 9に対応するCentOS Linux 9は提供さず、今後はCentOS Stream 9の提供とする。
Red Hat Enterprise Linux派生ディストリビューション Red Hat Enterprise Linux派生ディストリビューション
RHELには様々なディストリビューションが存在する。大きくは、まず同社がメンテナを行っているFedora Linuxがある。これは、もともとはRHELの無償版であった。
しかし、Fedoraはサポート期間が比較的短く、実験的なリリース方針であったため、長期サポートを望むユーザとしては利用に適していなかった。
RHELはコンパイル済みのものを無償提供していないが、完全なソースコードを公開しているため、これを入手し再コンパイルすることで派生ディストリビューションの作成が行われている。
CentOSのサポート情報 CentOS
   Version  完全更新期限 メンテナス更新期限     6 6.10(最終) 2017年 Q2 2020/11/30   7 7.9-2009(最新) 2020年 Q4 2024/06/30   8 8.5.2111(最終) 2021年12月 2021/12/31    CentOS Stream CentOS StreamはRHELとFedora Linuxの中間を目指したディストリビューション。</description>
    </item>
    
    <item>
      <title>最近気持ちが上がった話</title>
      <link>https://pages.shibadog.net/posts/005_%E6%9C%80%E8%BF%91%E6%B0%97%E6%8C%81%E3%81%A1%E3%81%8C%E4%B8%8A%E3%81%8C%E3%81%A3%E3%81%9F%E8%A9%B1/</link>
      <pubDate>Sat, 20 Jun 2020 00:26:00 +0900</pubDate>
      
      <guid>https://pages.shibadog.net/posts/005_%E6%9C%80%E8%BF%91%E6%B0%97%E6%8C%81%E3%81%A1%E3%81%8C%E4%B8%8A%E3%81%8C%E3%81%A3%E3%81%9F%E8%A9%B1/</guid>
      <description>別にまとめる気もなく、アゲアゲになったヤツをただ並べるだけ
 Spring-bootの2.3系でmavenのビルドにbuildpackが組み込まれた  なので、ちょーーーかんたんにdocker-composeで複数アプリをホイホイ立てれるし、コード編集しつつ反映が楽ちん。   vscodeでdrawioを直いじりができつつ、pngやsvgで保存できる。  なので、ちょーーーかんたんにmarkdownに埋め込む画像をdrawioで編集しつつgithubで見れる。(hugo使った記事にも使える)   一緒にお題を決めて勉強をしてくれる人を見つけた（若い子たちだけど おいちゃんから連絡があった  あんまりなかった。。。でもマジで気分が上がったネタだった。
次は、こうだったらいいのになー
 APIのI/Fをドキュメントする便利で安定していて広く使える方法 超手軽に立てられる環境隔離ができ（Concouseみたいに）、環境構築をコードで書けるCIシステム ブラウザバージョンアップに追従しなくていいブラウザ自動操作系の何か（selenium辛い）  </description>
    </item>
    
    <item>
      <title>暗号化/ハッシュ化について調べた</title>
      <link>https://pages.shibadog.net/posts/003_encript/</link>
      <pubDate>Mon, 04 Nov 2019 22:54:02 +0900</pubDate>
      
      <guid>https://pages.shibadog.net/posts/003_encript/</guid>
      <description>何もできなかったから過去書いたネタを転載（ぉ
暗号化アルゴリズム 暗号化と複合 暗号化は誰でもアクセス可能なパブリックな場所でデータを転送する際に、第三者にデータを盗み見されたり、改ざんされないようにデータを守るために用いられる。
暗号化や複合は、暗号化アルゴリズムと鍵によって行われる。
2種類の暗号化方式 暗号化アルゴリズムには大きく分けて2種類のものがある。
 共通鍵暗号 公開鍵暗号  共通鍵暗号 この方式は、直観的に理解しやすい。
いわゆる現実で用いる「鍵」と同様の方法で、一つの「鍵」を用いて鍵をかける（暗号化）ことができ、さらに同じ「鍵」で鍵を開ける（複合化）できる。
また、この「鍵」を「共通鍵」と呼ぶ。
欠点と相手は、暗号化する側と、複合化する側が異なる場合に同一の「共通鍵」をそれぞれが保有している必要がある。
これは、「共通鍵」を他人が知り得てしまった場合は、その他人が暗号文を解読できてしまうというリスクが発生する。
公開鍵方式 この方式は、少し現実で表現しにくい。
二つの鍵を用意し、それぞれ、「暗号化用」と「複合化用」とする。
「暗号化用」の鍵を「公開鍵」と呼び、「複合化用」の鍵を「秘密鍵」と呼ぶ。
使用するときは、複合化する側が2つの鍵を生成し、「公開鍵」を暗号化する側に渡す。
渡された暗号化する側が「公開鍵」で暗号化を行った後、複合化する側に暗号文を渡す。
複合化する側は「秘密鍵」を用いて暗号文を複合化できる。
この方式の特徴は、「公開鍵」で暗号化したものは「秘密鍵」でのみ複合化できるということで、かつ、「公開鍵」を用いて「秘密鍵」を推測することができないことである。
「公開鍵」を知り得ても暗号化はできても複合化ができないため、必ず「秘密鍵」を持っているものしか暗号文を解読することはできない。
欠点としては、共通鍵方式と比べると処理（暗号化・複合化）の速度が遅い。
ハイブリット方式 それぞれの方式には利点・欠点がありそれを補完するためにはブリット方式が存在する。
ハイブリット方式では、データの暗号化には「共通鍵方式」を用い、この「共通鍵」を受け渡す際に「公開鍵方式」で暗号化を行うというものである。
「共通鍵」の漏えいリスクを「公開鍵方式」で担保し、高速な「共通鍵方式」のアルゴリズムでデータを担保するという手法。
共通鍵方式の中での2種類の方式 共通鍵方式の中で、その手法を大きく2つに分けることができる。
それが以下の2つの種類の暗号化方式である。
 ブロック暗号 ストリーム暗号  ブロック暗号 ブロック暗号は、暗号化対象の平文データを一定の長さのブロックに分割して暗号化を行う手法である。
通常、平文データは1byte単位の可変長であるが、1byteごとに1byteの暗号文としていた場合は256通りのパターンでしかないため、簡単に解読されてしまう。
これを防ぐために、8byte（64bit）や、32byte（256bit）といった、より大きな「ブロック」ごとにまとめて暗号化する方式で解読を難しくしている。
ストリーム暗号 ブロック暗号では、ブロック毎に暗号化をすることで1byte毎の暗号化よりも解読を難しくしているが、結局ブロック長が短ければパターン数が少なく解読の難易度も下がってしまう問題は変わらない。
ブロック長を十分な長さにしたとしても、過去あった暗号化方式であるDESでも起こったように、コンピュータの性能向上によって脆弱なアルゴリズムになってしまう。
そこで、任意長の鍵ストリーム列を生成させ、これと入力の平文を演算させる「ストリーム暗号」が考え出された。
これは、1bitや1byte単位でデータを暗号化でき、かつ、パターンを十分に増やせる。
また、対象の平文の長さを気にしなくて済むため、SSL（HTTPS）や無線LAN（WEP）など、ネットワークトラフィックを暗号化するために利用されている。
暗号化アルゴリズムの種類 暗号化アルゴリズム一覧    # 方式 暗号化方式 暗号アルゴリズム 信頼度 規格 備考     1 共通鍵 ブロック DES 低 RFC 2451    2 共通鍵 ブロック AES 中     3 共通鍵 ブロック Rijndael 高     4 共通鍵 ブロック Triple-DES 中     5 共通鍵 ブロック RC2 低 RFC 2268    6 共通鍵 ストリーム RC4 低 RFC 7465    7 公開鍵 - RSA 高  大きな数の素因数分解問題   8 公開鍵 - El Gamal 高  離散対数問題   9 公開鍵 - ECC 高  離散対数暗号方式に楕円曲線の点のグループを適用させた方式    暗号利用モード (Block cipher modes of opration) 暗号化のアルゴリズムとは別に、暗号化を行う手順についての規格（？）。</description>
    </item>
    
  </channel>
</rss>